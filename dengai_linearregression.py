# -*- coding: utf-8 -*-
"""DengAI_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wwhyztJFTJD7Emv1MVBpf9y8gAEo30r0
"""

from __future__ import print_function
get_ipython().run_line_magic('matplotlib', 'inline')
import pandas as pd
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import seaborn as sns
import pandas as pd
import numpy as np

disease = pd.read_csv("https://s3.amazonaws.com/drivendata/data/44/public/dengue_features_train.csv")
label = pd.read_csv ("https://s3.amazonaws.com/drivendata/data/44/public/dengue_labels_train.csv")
disease['label']=label.total_cases
disease['pre_week']= disease['label'].shift(-1)
disease.columns = [ "city","year","pre_week", "weekofyear","week_start_date","ndvi_ne","ndvi_nw","ndvi_se","ndvi_sw","precipitation_amt_mm" , "reanalysis_air_temp_k", "reanalysis_avg_temp_k","reanalysis_dew_point_temp_k","reanalysis_max_air_temp_k","reanalysis_min_air_temp_k","reanalysis_precip_amt_kg_per_m2","reanalysis_relative_humidity_percent","reanalysis_sat_precip_amt_mm", "reanalysis_specific_humidity_g_per_kg", "reanalysis_tdtr_k","station_avg_temp_c", "station_diur_temp_rng_c", "station_max_temp_c", "station_min_temp_c", "station_precip_mm", "label"]
print(disease)

# Coorelation Heat-map shown below

test = pd.DataFrame(disease)
test1 = disease[["reanalysis_tdtr_k" , "station_diur_temp_rng_c" , "station_precip_mm" ,  "reanalysis_sat_precip_amt_mm" , "reanalysis_relative_humidity_percent" , "station_max_temp_c",  "year" , "reanalysis_dew_point_temp_k" ]]
corr = test1.corr(method='pearson') 
fig, ax = plt.subplots(figsize=(9,9))
sns.heatmap(corr, annot=True, xticklabels=corr.columns, 
            yticklabels=corr.columns, ax=ax, linewidths=.5, 
            vmin = -1, vmax=1, center=0)

plt.title('Correlation HeatMap')
plt.show()

# Building linear regression model

import sklearn.metrics
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score

features =disease[[ "reanalysis_tdtr_k" , "station_diur_temp_rng_c" , "station_precip_mm" ,  "reanalysis_sat_precip_amt_mm" , "reanalysis_relative_humidity_percent" , "station_max_temp_c",  "year" , "reanalysis_dew_point_temp_k" ]]

targets = disease[["label"]]


features = features.dropna() 

# Match features count after removing NaN values
targets = targets[:features.count()[0]]

# Splitting training and test data

X_train, X_test, y_train, y_test = train_test_split(features, targets, test_size=0.2, random_state=66)

# Linear Regression Model

reg_model = LinearRegression()
reg_model.fit(X_train, y_train)

y_pred = reg_model.predict(X_test)

y_pred_a = pd.DataFrame(y_pred)
y_test_a = y_test.reset_index(drop=True, inplace=False)
pred_act_df = pd.concat([y_test_a,y_pred_a], axis=1).sort_values(1,axis=1).reset_index(drop=True)

# Plot

plt.figure(figsize=(6, 6))
maxlimit = pred_act_df['label'].max()
plt.xlim(-1, maxlimit)
plt.ylim(-1, maxlimit)
plt.scatter(pred_act_df[0], pred_act_df['label'], s= 10)
plt.xlabel('Predicted label')
plt.ylabel('Actual label')
plt.plot([-1,maxlimit], [-1,maxlimit], ls="--", c=".3")
plt.title('Actual vs Predicted label')
plt.show()

results = smf.ols("label ~ reanalysis_tdtr_k +station_diur_temp_rng_c + station_precip_mm  + reanalysis_sat_precip_amt_mm +reanalysis_relative_humidity_percent  + station_max_temp_c  + year +  reanalysis_dew_point_temp_k ", data = disease).fit()
results.summary()

# Print important metrics

from sklearn import metrics
#print result of MAE
print (metrics. mean_absolute_error(y_test,y_pred))
#print result of MSE
print (metrics. mean_squared_error(y_test,y_pred))
#print result of RMSE
print (np.sqrt(metrics. mean_squared_error (y_test,y_pred)))